println("Sprawdzenie prostych sekwencji (rys. 15.6)")
println("eps(Float32)            => ", eps(Float32)) # dokładność dla Float32
println("bitstring(eps(Float32)) => ", bitstring(eps(Float32)))
println("bitstring(1. + eps(Float32)/2) => ", bitstring(1. + eps(Float32)/2))
println("bitstring(1. + eps(Float32))   => ", bitstring(1. + eps(Float32)))
println("bitstring(1. + 2*eps(Float32)) => ", bitstring(1. + 2*eps(Float32)))
println("bitstring(Float32(Inf))  => ", bitstring(Float32(Inf)))
println("bitstring(Float32(-Inf)) => ", bitstring(Float32(-Inf)))
println("bitstring(Float32(NaN))  => ", bitstring(Float32(NaN)))
println("bitstring(Float32(-0.009765625)) => ", bitstring(Float32(-0.009765625))) # unormowana 
println("bitstring(Float32(2.)^(-126-3))  => ", bitstring(Float32(2.)^(-126-3)))  # nie unormowana
println("Float32((10.)^3) + Float32((10.)^(3-8)) => ", Float32((10.)^3) + Float32((10.)^(3-8))) # druga liczba "zniknęła"
println("Float32((10.)^3)                        => ", Float32((10.)^3))
println("Float32((10.)^(3-8))                    => ", Float32((10.)^(3-8)))
println("\n")

println("Wlasne modyfikacje")
println("eps(Float16)  => ", eps(Float16))
println("eps(Float32)  => ", eps(Float32))
println("eps(Float64)  => ", eps(Float64))
println("eps(BigFloat) => ", eps(BigFloat))
println("bitstring(eps(Float16))  => ", bitstring(eps(Float16)))
println("bitstring(eps(Float32))  => ", bitstring(eps(Float32)))
println("bitstring(eps(Float64))  => ", bitstring(eps(Float64)))
# println("bitstring(eps(BigFloat)) => ", bitstring(eps(BigFloat))) # ERROR: ArgumentError: BigFloat not a primitive type
println("Float16(1.) + eps(Float64) => ", Float16(1.) + eps(Float64))
println("bitstring(Float16(1.) + eps(Float64)) => ", bitstring(Float16(1.) + eps(Float64)))
println("Float16(1.) + eps(BigFloat) => ", Float16(1.) + eps(BigFloat))
# println("bitstring(Float16(1.) + eps(BigFloat)) => ", bitstring(Float16(1.) + eps(BigFloat))) # ERROR: ArgumentError: BigFloat not a primitive type
println("Float16(1.25) + eps(Float16) => ", Float16(1.25) + eps(Float16))
println("bitstring(Float16(1.25) + eps(Float16)) => ", bitstring(Float16(1.25) + eps(Float16)))
println("eps(Float32) => ", eps(Float32))
println("2^(-23)      => ", 2^(-23))
println("bitstring(UInt8(95)) => ", bitstring(UInt8(95)))
println("bitstring(UInt16(9324)) => ", bitstring(UInt16(9324)))
println("bitstring(UInt32(971584254)) => ", bitstring(UInt32(971584254)))
println("bitstring(UInt64(9482175982174248563)) => ", bitstring(UInt64(9482175982174248563)))
println("bitstring(UInt128(92736148562489541268426845965412526989)) => ", bitstring(UInt128(92736148562489541268426845965412526989)))
# println("bitstring(BigInt(1)) => ", bitstring(BigInt(1))) # ERROR: ArgumentError: BigInt not a primitive type

println("\n", "Konwersja Float16 na Float64")
float16_val = Float16(123.4)
float64_val = Float64(float16_val)
println("Float16(123.4) => ", float16_val)
println("bitstring(Float16(123.4)) => ", bitstring(float16_val))
println("Float16(123.4) jako Float64 => ", float64_val)
println("bitstring(Float16(123.4) jako Float64) => ", bitstring(float64_val))

println("\n", "Konwersja Float64 na Float16")
float64_val = Float64(123.456)
float16_val = Float16(float64_val)
println("Float64(123.456) => ", Float64(123.456))
println("bitstring(Float64(123.456)) => ", bitstring(Float64(123.456)))
println("Float64(123.456) jako Float16 => ", float16_val)
println("bitstring(Float64(123.456) jako Float16) => ", bitstring(float16_val))

println("\n", "Konwersja Float16 na Int16")
# float16_val = Float16(987.6)
# int16_val = Int16(float16_val) # ERROR: InexactError: Int16(987.5)
float16_val = Float16(123.0)
int16_val = Int16(float16_val)
println("Float16(123.0) => ", float16_val)
println("bitstring(Float16(123.0)) => ", bitstring(float16_val))
println("Float16(123.0) jako Int16 => ", int16_val)
println("bitstring(Float16(123.0) jako Int16) => ", bitstring(int16_val))
